<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Learning Note</title>
  <subtitle>Keep Learning !</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tsuyoshitsai.github.io/"/>
  <updated>2017-01-08T16:53:15.865Z</updated>
  <id>https://tsuyoshitsai.github.io/</id>
  
  <author>
    <name>Tsuyoshi Tsai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git #15 版本歷史紀錄</title>
    <link href="https://tsuyoshitsai.github.io/2017/01/09/Git-15-%E7%89%88%E6%9C%AC%E6%AD%B7%E5%8F%B2%E7%B4%80%E9%8C%84/"/>
    <id>https://tsuyoshitsai.github.io/2017/01/09/Git-15-版本歷史紀錄/</id>
    <published>2017-01-08T16:52:51.000Z</published>
    <updated>2017-01-08T16:53:15.865Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>版本分享給其他人前，可以預先整理版本紀錄，讓其他人對版本的修改過程有較清楚的瞭解。</p>
<h3 id="基本觀念"><a href="#基本觀念" class="headerlink" title="基本觀念"></a>基本觀念</h3><ul>
<li>每完成一個項目的編輯就建立版本</li>
<li>有順序的修正功能，確保版本變更按順序提交，以便追蹤</li>
</ul>
<h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><ul>
<li>分享的 Git 原始碼的最小單位是 <strong>分支</strong></li>
<li>在特定分支 <strong>分享給其他人前</strong>，可以任意修改分支上的版本歷史紀錄</li>
<li>將特定分支 <strong>分享給其他人後</strong>，就不要再修改版本歷史紀錄</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;版本分享給其他人前，可以預先整理版本紀錄，讓其他人對版本的修改過程有較清楚的瞭解。&lt;/p&gt;
&lt;h3 id=&quot;基本觀念&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
      <category term="Git" scheme="https://tsuyoshitsai.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git #14 忽略清單</title>
    <link href="https://tsuyoshitsai.github.io/2017/01/09/Git-14-%E5%BF%BD%E7%95%A5%E6%B8%85%E5%96%AE/"/>
    <id>https://tsuyoshitsai.github.io/2017/01/09/Git-14-忽略清單/</id>
    <published>2017-01-08T16:52:42.000Z</published>
    <updated>2017-01-08T16:53:23.295Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>有時不希望將工具產生的暫存或快取檔案被加入版本控管，為了排除這些檔案，可以使用忽略清單 ( .gitignore ) 的機制。</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>可列出檔名或路徑</li>
<li>列在清單內的檔名或路徑不會出現在 <code>git status</code> 的結果中，也不會在 <code>git add</code> 時加入索引</li>
<li>僅限 <strong>未追蹤 ( Untracked file )</strong> 的檔案會被忽略，<strong>已追蹤 ( Staged file )</strong> 的檔案不受忽略清單控制</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;有時不希望將工具產生的暫存或快取檔案被加入版本控管，為了排除這些檔案，可以使用忽略清單 ( .gitignore ) 的機制。&lt;/p&gt;
&lt;h
    
    </summary>
    
    
      <category term="Git" scheme="https://tsuyoshitsai.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git #13 合併</title>
    <link href="https://tsuyoshitsai.github.io/2017/01/09/Git-13-%E5%90%88%E4%BD%B5/"/>
    <id>https://tsuyoshitsai.github.io/2017/01/09/Git-13-合併/</id>
    <published>2017-01-08T16:51:44.000Z</published>
    <updated>2017-01-08T16:52:26.186Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本觀念"><a href="#基本觀念" class="headerlink" title="基本觀念"></a>基本觀念</h3><ul>
<li>合併的功能奠基於分支上</li>
<li>合併的動作必須發生在同一個儲存庫中</li>
<li>若合併時，相同檔案的相同位置處皆有變更，會引發衝突，同時檔案會被標示為 <code>unmerged</code> 狀態</li>
<li>衝突需要使用者自行解決</li>
<li>合併成功後，Git 會自動替我們建立一個新版本</li>
</ul>
<h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><ol>
<li>合併前，檢查目前所在的分支</li>
<li>合併前，檢查工作目錄與索引的狀態</li>
</ol>
<h3 id="解決衝突"><a href="#解決衝突" class="headerlink" title="解決衝突"></a>解決衝突</h3><p>要解決衝突有以下幾種可行的方式：</p>
<ol>
<li>若合併的過程中發生衝突，直接 <code>git add</code> 可以將目前工作目錄的狀態加到索引中，這麼做會取消 unmerged 的衝突狀態，再執行 <code>git commit</code> 便能夠以 <strong>目前分支的版本</strong> 解決衝突。</li>
<li>手動修改衝突的檔案，移除衝突標示，編輯出符合需求的內容後再執行 <code>git add</code> 與 <code>git commit</code> 即可。</li>
<li>使用 GUI 工具，選擇符合需求的版本。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本觀念&quot;&gt;&lt;a href=&quot;#基本觀念&quot; class=&quot;headerlink&quot; title=&quot;基本觀念&quot;&gt;&lt;/a&gt;基本觀念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;合併的功能奠基於分支上&lt;/li&gt;
&lt;li&gt;合併的動作必須發生在同一個儲存庫中&lt;/li&gt;
&lt;li&gt;若合併時，相同檔
    
    </summary>
    
    
      <category term="Git" scheme="https://tsuyoshitsai.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git #12 版本日誌</title>
    <link href="https://tsuyoshitsai.github.io/2016/12/29/Git-12-%E7%89%88%E6%9C%AC%E6%97%A5%E8%AA%8C/"/>
    <id>https://tsuyoshitsai.github.io/2016/12/29/Git-12-版本日誌/</id>
    <published>2016-12-28T17:37:03.000Z</published>
    <updated>2016-12-29T16:17:19.173Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在 Git 中做的所有版本變更，即使是復原的操作，都會被記錄下來，所以透過版本日誌的紀錄，能夠還原到任何狀態。簡言之，版本日誌就是參照變更的歷程記錄。無論對這些紀錄本身做任何操作，如修改或刪除，都不會影響物件儲存庫的內容。</p>
<h3 id="產生-Reflog-的原則"><a href="#產生-Reflog-的原則" class="headerlink" title="產生 Reflog 的原則"></a>產生 Reflog 的原則</h3><p>只要透過指令修改參照的內容，或是變更分支的 HEAD 參照內容，就會建立 Reflog。因為修改 ref 而產生 log，所以指令名稱才稱為 reflog。</p>
<h3 id="產生-Reflog-的動作"><a href="#產生-Reflog-的動作" class="headerlink" title="產生 Reflog 的動作"></a>產生 Reflog 的動作</h3><p>除以下動作外，每個分支、暫存版都會有自己的 Reflog，這些資料也都會存在 <strong><em>.git/logs/refs/</em></strong> 資料夾下。</p>
<ul>
<li>Commit</li>
<li>Checkout</li>
<li>Pull</li>
<li>Push</li>
<li>Merge</li>
<li>Reset</li>
<li>Clone</li>
<li>Branch</li>
<li>Rebase</li>
<li>Stash</li>
</ul>
<h3 id="Reflog-的過期時間"><a href="#Reflog-的過期時間" class="headerlink" title="Reflog 的過期時間"></a>Reflog 的過期時間</h3><p>預設保存 90 天。若其中的 Commit 物件已不在分支上，則預設保留 30 天。</p>
<h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><ul>
<li><code>git reflog</code><ul>
<li>列出 reflog 清單</li>
<li><code>git reflog [Branch]</code><ul>
<li>只顯示特定分支的 reflog</li>
</ul>
</li>
</ul>
</li>
<li><code>git log -g</code><ul>
<li>列出每個 reflog 中的內容</li>
</ul>
</li>
<li><code>git reflog delete [Ref@{Specifier}]</code><ul>
<li>刪除特定 reflog</li>
</ul>
</li>
<li><code>git config --global/local gc.reflogExpire &quot;Day&quot;</code></li>
<li><code>git config --global/local gc.reflogExpireUnreachable &quot;Day&quot;</code><ul>
<li>調整 reflog 過期的預設值</li>
<li>Day 可設定 [Number days]，如 30 days 可保留 30 天</li>
<li>Day 可設定 never 表示永不刪除紀錄</li>
<li><code>git config --local gc.[Branch].reflogExpire &quot;Day&quot;</code></li>
<li><code>git config --local gc.[Branch].reflogExpireUnreachable &quot;Day&quot;</code><ul>
<li>針對特定分支設定 reflog 過期時間</li>
</ul>
</li>
</ul>
</li>
<li><code>git reflog expire --expire=now --all</code><ul>
<li>清除所有 reflog</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;在 Git 中做的所有版本變更，即使是復原的操作，都會被記錄下來，所以透過版本日誌的紀錄，能夠還原到任何狀態。簡言之，版本日誌就是參照變更的
    
    </summary>
    
    
      <category term="Git" scheme="https://tsuyoshitsai.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git #11 標籤</title>
    <link href="https://tsuyoshitsai.github.io/2016/12/29/Git-11-%E6%A8%99%E7%B1%A4/"/>
    <id>https://tsuyoshitsai.github.io/2016/12/29/Git-11-標籤/</id>
    <published>2016-12-28T17:36:58.000Z</published>
    <updated>2016-12-29T16:17:06.739Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>隨著開發時程拉長、版本的數量增加，難以單憑版本說明尋找到特定的版本，所以我們可以在建立版本時，使用標籤替某些重要的版本做標記。</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>以自訂名稱標記特定版本</li>
<li>幫助回憶特定版本的功能或狀態</li>
</ul>
<h3 id="類型"><a href="#類型" class="headerlink" title="類型"></a>類型</h3><p>雖有兩種標籤類型，但使用上的差異並不大。大部分情況會使用標示標籤，因其能夠給予版本說明，且該標籤是基於 Git 物件的方式產生，具有永久性、不可變動性 ( Git 物件中僅索引具有可變動性 )。</p>
<ul>
<li>輕量標籤 ( Lightweight Tag )<ul>
<li>相對名稱的一種</li>
<li>特定版本的別名</li>
</ul>
</li>
<li>標示標籤 ( Annotated Tag )<ul>
<li>Git 物件的一種 ( 即 Tag 物件 )</li>
<li>會存放在物件儲存區中，且關聯到另一個 Commit 物件</li>
<li>可以附加版本說明</li>
</ul>
</li>
</ul>
<h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><ul>
<li><code>git tag</code><ul>
<li>列出所有標籤</li>
<li>包括輕量標籤與標示標籤，無法看出標籤類型</li>
<li><code>git tag [TagName]</code><ul>
<li>建立輕量標籤</li>
</ul>
</li>
<li><code>git tag [TagName] -a -m &quot;LogMessage&quot;</code><ul>
<li>建立標示標籤，並加上版本說明</li>
<li>跟 <code>git commit</code> 一樣，所有標示標籤都必須加上版本說明</li>
<li>該指令預設會將當前的 HEAD 版本建立成 Tag 物件</li>
</ul>
</li>
<li><code>git tag [TagName] [Object]</code><ul>
<li>將特定物件建立輕量標籤</li>
<li>在指令後面加上 <code>-a -m &quot;LogMessage&quot;</code> 即可改為建立標示標籤</li>
</ul>
</li>
<li><code>git tag [TagName] -d</code><ul>
<li>刪除特定標籤</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><code>git cat-file -p [TagName]</code><ul>
<li>查看標籤的內容</li>
</ul>
</li>
<li><code>git cat-file -t [TagName]</code><ul>
<li>查看標籤的物件類型</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;隨著開發時程拉長、版本的數量增加，難以單憑版本說明尋找到特定的版本，所以我們可以在建立版本時，使用標籤替某些重要的版本做標記。&lt;/p&gt;
&lt;h
    
    </summary>
    
    
      <category term="Git" scheme="https://tsuyoshitsai.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git #10 Config Setting</title>
    <link href="https://tsuyoshitsai.github.io/2016/12/29/Git-10-Config-Setting/"/>
    <id>https://tsuyoshitsai.github.io/2016/12/29/Git-10-Config-Setting/</id>
    <published>2016-12-28T17:36:40.000Z</published>
    <updated>2016-12-29T16:33:17.358Z</updated>
    
    <content type="html"><![CDATA[<h3 id="儲存-Git-Config-的三個地方"><a href="#儲存-Git-Config-的三個地方" class="headerlink" title="儲存 Git Config 的三個地方"></a>儲存 Git Config 的三個地方</h3><ul>
<li>系統層級 ( <code>--system</code> )<ul>
<li>設定整台電腦，適用於本機所有使用者的預設值</li>
<li>通常預設位置在 <strong><em>C:/Program Files (x86)/Git/etc/.gitconfig</em></strong> 這個檔案中</li>
</ul>
</li>
<li>使用者層級 ( <code>--global</code> )<ul>
<li>設定目前登入的使用者</li>
<li>通常預設位置在 <strong><em>C:/Users/[Username]/.gitconfig</em></strong> 這個檔案中</li>
</ul>
</li>
<li>儲存區層級 ( <code>--local</code> )<ul>
<li>設定於特定專案中</li>
<li>通常預設位置在 <strong><em>/[WorkingDir]/.git/config</em></strong> 這個檔案中</li>
</ul>
</li>
</ul>
<h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><h5 id="一般操作"><a href="#一般操作" class="headerlink" title="一般操作"></a>一般操作</h5><ul>
<li><code>git config --list</code><ul>
<li>列出 Git for Windows 已設定的所有選項</li>
<li><code>git config --list --system</code><ul>
<li>僅列出系統層級的選項</li>
</ul>
</li>
<li><code>git config --list --global</code><ul>
<li>僅列出使用者層級的選項</li>
</ul>
</li>
<li><code>git config --list --local</code><ul>
<li>僅列出儲存區層級的選項</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><code>git config [ConfigSection.ConfigName]</code><ul>
<li>取得特定選項的值</li>
</ul>
</li>
</ul>
<ul>
<li><code>git config [ConfigSection.ConfigName] [ConfigValue]</code><ul>
<li>設定特定選項的值</li>
</ul>
</li>
</ul>
<ul>
<li><code>git config --unset --system/global/local [ConfigSection.ConfigName]</code><ul>
<li>刪除特定選項的值</li>
</ul>
</li>
</ul>
<h5 id="常用設定"><a href="#常用設定" class="headerlink" title="常用設定"></a>常用設定</h5><ul>
<li><code>git config --global alias.[Alias] [GitCommand]</code><ul>
<li>設定 [Alias] 為 [GitCommand] 的別名，以利快速執行指令</li>
</ul>
</li>
</ul>
<ul>
<li><code>git config --global core.editor notepad.exe/&quot;EditorDir&quot;</code><ul>
<li>改變執行 <code>git commit</code> 時打開的預設編輯器為記事本或指定路徑的編輯器</li>
</ul>
</li>
</ul>
<ul>
<li><code>git config --edit --system/global/local</code><ul>
<li>直接開啟編輯設定檔</li>
</ul>
</li>
</ul>
<ul>
<li><code>git config --global help.autocorrect 1</code><ul>
<li>開啟自動修正錯誤參數的功能</li>
</ul>
</li>
</ul>
<ul>
<li><code>git config --local/global commit.template &quot;TemplateDir&quot;</code><ul>
<li>指定自訂 Commit 版本說明的範本路徑位置</li>
<li><code>--local</code> 參數需在有 <code>git init</code> 過的專案目錄中執行，且會將設定存在儲存區層級</li>
<li><code>--global</code> 參數不限定執行的目錄，會將設定存在使用者層級</li>
<li>可以兩者皆設定，Git 會自動依照套用順序執行，所以 local 會覆蓋 global 的設定</li>
</ul>
</li>
</ul>
<h3 id="套用順序"><a href="#套用順序" class="headerlink" title="套用順序"></a>套用順序</h3><p>Git 在執行時會依照以下順序套用：</p>
<ol>
<li>系統層級</li>
<li>使用者層級</li>
<li>儲存區層級 ( 優先權最高 )</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;儲存-Git-Config-的三個地方&quot;&gt;&lt;a href=&quot;#儲存-Git-Config-的三個地方&quot; class=&quot;headerlink&quot; title=&quot;儲存 Git Config 的三個地方&quot;&gt;&lt;/a&gt;儲存 Git Config 的三個地方&lt;/h3&gt;&lt;ul&gt;

    
    </summary>
    
    
      <category term="Git" scheme="https://tsuyoshitsai.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git #09 暫存工作目錄</title>
    <link href="https://tsuyoshitsai.github.io/2016/12/29/Git-09-%E6%9A%AB%E5%AD%98%E5%B7%A5%E4%BD%9C%E7%9B%AE%E9%8C%84/"/>
    <id>https://tsuyoshitsai.github.io/2016/12/29/Git-09-暫存工作目錄/</id>
    <published>2016-12-28T17:36:35.000Z</published>
    <updated>2016-12-29T16:16:36.887Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>工作目錄是目前進度的狀態；索引則是希望建立版本的狀態。當開發途中被要求臨時修改某項功能，但不希望動到未完成的檔案時，可以將工作目錄中的變更狀態使用 <code>git stash</code> 指令建立 stash 版本，或稱之為暫存版。</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>解決開發過程中插單的問題</li>
<li>將目前的變更狀態暫存起來，先去解決其他更緊急的問題</li>
</ul>
<h3 id="工作目錄狀態"><a href="#工作目錄狀態" class="headerlink" title="工作目錄狀態"></a>工作目錄狀態</h3><ul>
<li>新增檔案 ( 未列入追蹤 ) ( Untracked files )</li>
<li>新增檔案 ( 已加入索引 ) ( Tracked/Staged files )</li>
<li>修改檔案 ( 未加入索引 ) ( Tracked/Unstaged files )</li>
<li>修改檔案 ( 已加入索引 ) ( Tracked/Staged files )</li>
<li>刪除檔案 ( 未加入索引 ) ( Tracked/Unstaged files )</li>
<li>刪除檔案 ( 已加入索引 ) ( Tracked/Staged files )</li>
</ul>
<h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><ul>
<li><code>git stash (save)</code><ul>
<li>建立暫存版</li>
<li>僅包含已追蹤 ( tracked ) 的檔案</li>
<li><code>git stash (save) -u</code><ul>
<li>包含所有未追蹤 ( Untracked ) 及已追蹤 ( Tracked ) 的檔案</li>
</ul>
</li>
<li><code>git stash save -u &quot;LogMessage&quot;</code><ul>
<li>該指令可以在建立暫存版的同時輸入版本說明</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><code>git stash pop</code><ul>
<li>將暫存版合併回現在的工作目錄</li>
<li>預設會取回最近的一筆暫存版 ( stash@{0} )</li>
<li>該指令執行完後 <strong>會</strong> 將被取回的 stash 分支刪除</li>
</ul>
</li>
</ul>
<ul>
<li><code>git stash apply</code><ul>
<li>將暫存版合併回現在的工作目錄</li>
<li>該指令執行完後 <strong>不會</strong> 將被取回的 stash 分支刪除</li>
</ul>
</li>
</ul>
<ul>
<li><code>git stash pop/apply &quot;Stash&quot;</code><ul>
<li>取回特定的暫存版</li>
<li>如 <code>git stash pop/apply &quot;stash@{1}&quot;</code> 可取回 stash@{1} 的暫存版</li>
</ul>
</li>
</ul>
<ul>
<li><code>git stash list</code><ul>
<li>列出目前的 stash 分支清單</li>
</ul>
</li>
</ul>
<ul>
<li><code>git stash drop &quot;Stash&quot;</code><ul>
<li>刪除特定的暫存版</li>
</ul>
</li>
</ul>
<ul>
<li><code>git stash clear</code><ul>
<li>刪除所有暫存版</li>
</ul>
</li>
</ul>
<h3 id="運作"><a href="#運作" class="headerlink" title="運作"></a>運作</h3><p>建立暫存版的過程中， Git  會自動建立兩個分支、並個別建立版本，再將這兩個分支與 HEAD 版本合併成 stash 版本，以下為三個版本的內容：</p>
<ol>
<li>工作目錄的 HEAD 版本</li>
<li>工作目錄中索引的內容</li>
<li>工作目錄中未追蹤的內容</li>
</ol>
<p>建立暫存版後，Git  會自動產生暫存版的一般參照，並將變更的檔案還原成與 HEAD 的狀態相同，新增的檔案被刪除、修改的檔案被還原、刪除的檔案被加回。簡言之，就是使工作目錄的狀態與 HEAD 同步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;工作目錄是目前進度的狀態；索引則是希望建立版本的狀態。當開發途中被要求臨時修改某項功能，但不希望動到未完成的檔案時，可以將工作目錄中的變更狀
    
    </summary>
    
    
      <category term="Git" scheme="https://tsuyoshitsai.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git #08 參照名稱</title>
    <link href="https://tsuyoshitsai.github.io/2016/12/29/Git-08-%E5%8F%83%E7%85%A7%E5%90%8D%E7%A8%B1/"/>
    <id>https://tsuyoshitsai.github.io/2016/12/29/Git-08-參照名稱/</id>
    <published>2016-12-28T17:36:29.000Z</published>
    <updated>2016-12-29T16:16:06.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="參照名稱-Ref"><a href="#參照名稱-Ref" class="headerlink" title="參照名稱 ( Ref )"></a>參照名稱 ( Ref )</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>參照名稱 ( Ref ) 是物件的指標</li>
<li>Git 引擎或由使用者自行定義的名稱，用來指向特定 Git 物件</li>
<li>可將其想成 Git 物件絕對名稱的別名 ( Alias )</li>
</ul>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>參照名稱通常指向 Commit 物件，但也可以指向其他 Git 物件</li>
<li>參照名稱只是檔案，且放在 <strong><em>.git/refs</em></strong> 資料夾下<ul>
<li>本地分支：<strong><em>.git/refs/heads</em></strong></li>
<li>遠端分支：<strong><em>.git/refs/remotes</em></strong></li>
<li>標　　籤：<strong><em>.git/refs/tags</em></strong></li>
</ul>
</li>
<li>當輸入 <strong>參照簡稱</strong> 時，Git 會依照以下順序搜尋參照名稱，找到後立即回傳該檔案內容的 <strong>物件絕對名稱</strong><ul>
<li><strong><em>.git/&lt;參照簡稱&gt;</em></strong></li>
<li><strong><em>.git/refs/&lt;參照簡稱&gt;</em></strong></li>
<li><strong><em>.git/refs/tags/&lt;參照簡稱;標籤名稱&gt;</em></strong></li>
<li><strong><em>.git/refs/heads/&lt;參照簡稱;本地分支名稱&gt;</em></strong></li>
<li><strong><em>.git/refs/remotes/&lt;參照簡稱&gt;</em></strong></li>
<li><strong><em>.git/refs/remotes/&lt;參照簡稱;遠端分支名稱&gt;</em></strong></li>
</ul>
</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul>
<li>HEAD<ul>
<li>指向當前工作目錄中分支的 <strong>最新版</strong></li>
</ul>
</li>
<li>BranchName<ul>
<li>分支名稱，對應到 Git 物件儲存庫中的 Commit 物件，預設指向分支的最新版本</li>
</ul>
</li>
<li>TagName<ul>
<li>標籤名稱</li>
</ul>
</li>
</ul>
<hr>
<h2 id="符號參照名稱-Symref"><a href="#符號參照名稱-Symref" class="headerlink" title="符號參照名稱 ( Symref )"></a>符號參照名稱 ( Symref )</h2><h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3><ul>
<li>指向另一個一般參照，內容以 <strong>ref:</strong> 開頭</li>
</ul>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><ul>
<li>HEAD<ul>
<li>指向當前工作目錄中分支的 <strong>最新版</strong></li>
<li>在當前分支執行 <code>git commit</code> 時，該符號參照也會一併更新成最新版本</li>
</ul>
</li>
<li>ORIG_HEAD<ul>
<li>HEAD 的 <strong>前一版</strong></li>
<li>常用來復原上一次的版本變更</li>
</ul>
</li>
<li>FETCH_HEAD<ul>
<li>遠端儲存庫每個分支的 <strong>最新版 ( HEAD )</strong> 的絕對名稱</li>
</ul>
</li>
<li>MERGE_HEAD<ul>
<li>合併來源的 Commit 物件的絕對名稱</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;參照名稱-Ref&quot;&gt;&lt;a href=&quot;#參照名稱-Ref&quot; class=&quot;headerlink&quot; title=&quot;參照名稱 ( Ref )&quot;&gt;&lt;/a&gt;參照名稱 ( Ref )&lt;/h2&gt;&lt;h3 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerli
    
    </summary>
    
    
      <category term="Git" scheme="https://tsuyoshitsai.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git #07 相對名稱</title>
    <link href="https://tsuyoshitsai.github.io/2016/12/29/Git-07-%E7%9B%B8%E5%B0%8D%E5%90%8D%E7%A8%B1/"/>
    <id>https://tsuyoshitsai.github.io/2016/12/29/Git-07-相對名稱/</id>
    <published>2016-12-28T17:36:24.000Z</published>
    <updated>2016-12-29T16:14:10.056Z</updated>
    
    <content type="html"><![CDATA[<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>以特定 Commit 物件的相對位置，找到其他 Commit 物件</li>
</ul>
<h3 id="表示法"><a href="#表示法" class="headerlink" title="表示法"></a>表示法</h3><ul>
<li>[Object]~[Number]<ul>
<li>代表第 Number 個上層 Commit 物件</li>
<li>HEAD~1 可找到 HEAD 的上一層 Commit 物件</li>
<li>HEAD~3 可找到 HEAD 的上三層 Commit 物件</li>
</ul>
</li>
</ul>
<ul>
<li>[Object]^[Number]<ul>
<li>擁有多個上層 Commit 物件時，要代表第 Number 個第一代的上層 Commit 物件</li>
<li>HEAD^1 可找到 HEAD 的第一個第一代的上層 Commit 物件</li>
<li>HEAD^3 可找到 HEAD 的第三個第一代的上層 Commit 物件 ( 需在有分支合併的情況下才能這麼做 )</li>
</ul>
</li>
</ul>
<ul>
<li>[Object]^[Number1]~[Number2]<ul>
<li>代表第 Number1 個第一代的第 Number2 層 Commit 物件</li>
<li>HEAD^1~1 可找到 HEAD 的第一個第一代的上一層 Commit 物件</li>
<li>HEAD^1~3 可找到 HEAD 的第一個第一代的上三層 Commit 物件</li>
<li>HEAD^3~1 可找到 HEAD 的第三個第一代的上一層 Commit 物件 ( 需在有分支合併的情況下才能這麼做 )</li>
<li>HEAD^3~3 可找到 HEAD 的第三個第一代的上三層 Commit 物件 ( 需在有分支合併的情況下才能這麼做 )</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;以特定 Commit 物件的相對位置，找到其他 Commit 物件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;表示法&quot;&gt;&lt;a hre
    
    </summary>
    
    
      <category term="Git" scheme="https://tsuyoshitsai.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git #06 絕對名稱</title>
    <link href="https://tsuyoshitsai.github.io/2016/12/29/Git-06-%E7%B5%95%E5%B0%8D%E5%90%8D%E7%A8%B1/"/>
    <id>https://tsuyoshitsai.github.io/2016/12/29/Git-06-絕對名稱/</id>
    <published>2016-12-28T17:36:15.000Z</published>
    <updated>2016-12-29T16:14:04.827Z</updated>
    
    <content type="html"><![CDATA[<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>執行 Git 指令時，會需要用到物件名稱</li>
<li>當需要用到物件名稱時，可使用全稱，也能使用 4 ~ 40 個字元長度的絕對名稱</li>
</ul>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>以內容進行 SHA1 雜湊運算後的結果</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;執行 Git 指令時，會需要用到物件名稱&lt;/li&gt;
&lt;li&gt;當需要用到物件名稱時，可使用全稱，也能使用 4 ~ 40 個字元長度
    
    </summary>
    
    
      <category term="Git" scheme="https://tsuyoshitsai.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git #05 分支</title>
    <link href="https://tsuyoshitsai.github.io/2016/12/29/Git-05-%E5%88%86%E6%94%AF/"/>
    <id>https://tsuyoshitsai.github.io/2016/12/29/Git-05-分支/</id>
    <published>2016-12-28T17:36:05.000Z</published>
    <updated>2016-12-29T16:21:54.988Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>可以將分支想像成一種 <strong>快照</strong> 功能，將某個版本與其歷史版本建立一個 <strong>快照</strong>，並賦予其分支名稱，我們可以在這些分支上建立版本，日後可以再進行合併的操作。</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>Git 分散式版本控管機制的核心</li>
<li>解決版本衝突，順利進行合併</li>
</ul>
<h3 id="狀態"><a href="#狀態" class="headerlink" title="狀態"></a>狀態</h3><p><strong>[master]</strong></p>
<ul>
<li>master 代表目前的分支 ( Branch )</li>
<li>後面沒有數字代表目前沒有要被建立版本的索引</li>
</ul>
<p><strong>[master +10 ~15 -20 !]</strong></p>
<ul>
<li>+10 代表有 10 個「新增」的檔案 ( add )</li>
<li>~15 代表有 15 個「修改」的檔案 ( modify )</li>
<li>-20 代表有 20 個「刪除」的檔案 ( delete )</li>
<li>「紅色」代表未追蹤的檔案 ( Untracked )<ul>
<li>僅列出 <strong>當前目錄下的檔案與資料夾</strong></li>
<li>這些變更 <strong>不會</strong> 進入版本控管</li>
<li>可執行 <code>git add .</code> 指令將這些檔案加入索引 ，該指令並不會建立任何版本</li>
<li>「綠色」代表已被加入索引的檔案 ( Staged )，這些檔案已經準備可以建立版本 ( Commit )</li>
<li>列出 <strong>當前目錄與子目錄下的檔案與資料夾</strong>，檔案數量可能較紅色多</li>
<li>這些變更 <strong>會</strong> 進入版本控管</li>
<li>可執行 <code>git commit</code> 指令將這些檔案變更建立版本</li>
</ul>
</li>
</ul>
<h3 id="管理模式"><a href="#管理模式" class="headerlink" title="管理模式"></a>管理模式</h3><p>有分支就必須要合併，合併會產生版本衝突，為了解決版本衝突的問題，需要做好分支的管理。</p>
<ul>
<li>git-flow <ul>
<li>管理分支的邏輯</li>
<li><a href="https://speakerdeck.com/cjies/git-let-it-flow" target="_blank" rel="external">參考資料 01</a></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;可以將分支想像成一種 &lt;strong&gt;快照&lt;/strong&gt; 功能，將某個版本與其歷史版本建立一個 &lt;strong&gt;快照&lt;/strong&gt;，
    
    </summary>
    
    
      <category term="Git" scheme="https://tsuyoshitsai.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git #04 儲存庫、工作目錄、物件、索引</title>
    <link href="https://tsuyoshitsai.github.io/2016/12/29/Git-04-%E5%84%B2%E5%AD%98%E5%BA%AB%E3%80%81%E5%B7%A5%E4%BD%9C%E7%9B%AE%E9%8C%84%E3%80%81%E7%89%A9%E4%BB%B6%E3%80%81%E7%B4%A2%E5%BC%95/"/>
    <id>https://tsuyoshitsai.github.io/2016/12/29/Git-04-儲存庫、工作目錄、物件、索引/</id>
    <published>2016-12-28T17:35:45.000Z</published>
    <updated>2016-12-28T17:42:05.319Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Git 儲存庫的運作，是將工作目錄裡的變化，透過更新索引的方式，將資料寫入成 Git 物件。 </p>
<h3 id="儲存庫-Repository"><a href="#儲存庫-Repository" class="headerlink" title="儲存庫 ( Repository )"></a>儲存庫 ( Repository )</h3><ul>
<li>記錄所有版本資訊的地方</li>
<li>放在工作目錄的 <strong><em>.git</em></strong> 資料夾底下</li>
</ul>
<h3 id="工作目錄-Working-Directory"><a href="#工作目錄-Working-Directory" class="headerlink" title="工作目錄 ( Working Directory )"></a>工作目錄 ( Working Directory )</h3><ul>
<li>開發專案的地方</li>
<li>Git 的相關操作也會在此進行</li>
</ul>
<h3 id="物件-Object"><a href="#物件-Object" class="headerlink" title="物件 ( Object )"></a>物件 ( Object )</h3><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><p>保存儲存庫中的所有檔案與版本記錄</p>
<h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ul>
<li>是不可變的 ( Immutable ) 的檔案類型</li>
<li>透過內容產生 SHA1 雜湊值，依照該雜湊值命名</li>
<li>所有物件皆會以 zlib 演算法進行壓縮</li>
<li>每隔一段時間，Git 會自動將老舊的物件封裝，以改善檔案存取效率</li>
<li>封裝時會利用差異壓縮演算法自動計算 Blob 之間的變化，並將差異存放在 <strong><em>.git/objects/pack</em></strong> 資料夾下，此做法可以節省硬碟空間的消耗</li>
<li>存放在物件儲存區 ( Object Storage ) 中，預設位置在 <strong><em>.git/objects</em></strong> 資料夾底下</li>
</ul>
<h5 id="類型"><a href="#類型" class="headerlink" title="類型"></a>類型</h5><ul>
<li><strong>Tree</strong><ul>
<li>記錄特定資料夾下的檔案，及該檔案對應的 Blob 物件檔名</li>
<li>透過提交版本，產生 Tree 物件</li>
<li>可多層次包含其他 Tree</li>
<li>在特定版本下某個資料夾的快照 ( Snapshot )</li>
</ul>
</li>
<li><strong>Blob</strong><ul>
<li>即為原本的檔案內容</li>
<li>透過將檔案加入索引，產生 Blob 物件</li>
<li>將原本的「檔案內容」進行 SHA1 雜湊運算產生 HashId，並以該 HashId 為檔名</li>
</ul>
</li>
<li><strong>Commit</strong><ul>
<li>一個物件代表 Git 的一次提交 ( 版本 )</li>
<li>透過提交版本，產生 Commit 物件</li>
<li>記錄版本的相關訊息，如 Tree 物件、提交時間、版本說明等</li>
<li>除第一個 Commit 物件外，皆會記錄上一層的 Commit 物件名稱</li>
</ul>
</li>
<li><strong>Tag</strong><ul>
<li>用來關聯特定的 Tree、Blob、Commit 物件</li>
<li>常被使用於替特定版本的 Commit 物件標示易懂的名稱</li>
</ul>
</li>
</ul>
<h3 id="索引-Index、Stage"><a href="#索引-Index、Stage" class="headerlink" title="索引 ( Index、Stage )"></a>索引 ( Index、Stage )</h3><h5 id="別名"><a href="#別名" class="headerlink" title="別名"></a>別名</h5><p>索引在國外文章中，有許多別名，以下指的皆是索引：</p>
<ul>
<li>Index</li>
<li>Cache</li>
<li>Directory Cache</li>
<li>Current Directory Cache</li>
<li>Staging Area</li>
<li>Staged Files</li>
</ul>
<h5 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h5><p>保存要進儲存庫之前的工作目錄狀態；記錄要被提交到下一個版本的檔案。若想提交版本進儲存庫，需先更新索引。</p>
<h5 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h5><ul>
<li>是可變的 ( Mutable ) 的檔案類型</li>
<li>是介於物件儲存區 ( Object Storage ) 與工作目錄 ( Working Directory ) 之間的媒介</li>
</ul>
<h5 id="狀態"><a href="#狀態" class="headerlink" title="狀態"></a>狀態</h5><ul>
<li><strong>Untracked</strong><ul>
<li>未追蹤，代表尚未被加入 Git 儲存庫的檔案</li>
</ul>
</li>
<li><strong>Unmodified</strong><ul>
<li>未修改，代表檔案第一次被加入，或是檔案內容與 HEAD 內容一致</li>
</ul>
</li>
<li><strong>Modified</strong><ul>
<li>已修改，代表檔案已被編輯，或是檔案內容與 HEAD 內容不一致</li>
</ul>
</li>
<li><strong>Staged</strong><ul>
<li>已被加入索引，代表執行 Commit 時會將該檔案加進 Git 儲存庫</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;Git 儲存庫的運作，是將工作目錄裡的變化，透過更新索引的方式，將資料寫入成 Git 物件。 &lt;/p&gt;
&lt;h3 id=&quot;儲存庫-Reposi
    
    </summary>
    
    
      <category term="Git" scheme="https://tsuyoshitsai.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git #03 建立儲存庫</title>
    <link href="https://tsuyoshitsai.github.io/2016/12/29/Git-03-%E5%BB%BA%E7%AB%8B%E5%84%B2%E5%AD%98%E5%BA%AB/"/>
    <id>https://tsuyoshitsai.github.io/2016/12/29/Git-03-建立儲存庫/</id>
    <published>2016-12-28T17:35:26.000Z</published>
    <updated>2016-12-29T16:18:10.716Z</updated>
    
    <content type="html"><![CDATA[<p>有三種建立儲存庫的方式：</p>
<h3 id="1-本機的本地儲存庫-Local-Repository"><a href="#1-本機的本地儲存庫-Local-Repository" class="headerlink" title="1. 本機的本地儲存庫 ( Local Repository )"></a>1. 本機的本地儲存庫 ( Local Repository )</h3><p>使用 GitHub for Windows 的 Git Shell 指令列工具操作</p>
<ol>
<li>建立目錄：<br><code>$ mkdir git-demo</code></li>
<li>進入該目錄：<br><code>$ cd git-demo</code></li>
<li>建立儲存庫 ( Repository )：<br><em>預設的儲存庫會放在工作目錄中的 .git 目錄底下</em><br><code>$ git init</code></li>
</ol>
<hr>
<h3 id="2-本機的共用儲存庫-Shared-Repository"><a href="#2-本機的共用儲存庫-Shared-Repository" class="headerlink" title="2. 本機的共用儲存庫 ( Shared Repository )"></a>2. 本機的共用儲存庫 ( Shared Repository )</h3><p>共用儲存庫 ( Shared Repository ) 是指建立 Git 儲存庫但不包含工作目錄 ( Working Directory )，大多使用直接的檔案存取，通常在 Linux 作業系統下較有機會使用到。</p>
<ol>
<li>建立目錄：<br><code>$ mkdir share-repo</code></li>
<li>進入該目錄：<br><code>$ cd share-repo</code></li>
<li>建立共用儲存庫 ( Shared Repository )<br><em>該指令會在當前目錄建立所有 Git 儲存庫 的相關檔案與資料夾，該目錄不能拿來直接做開發用途，且最好只透過 Git 指令操作該目錄</em><br><code>$ git init --bare</code></li>
</ol>
<hr>
<h3 id="3-GitHub-或其他-Git-平台的遠端儲存庫-Remote-Repository"><a href="#3-GitHub-或其他-Git-平台的遠端儲存庫-Remote-Repository" class="headerlink" title="3. GitHub 或其他 Git 平台的遠端儲存庫 ( Remote Repository )"></a>3. GitHub 或其他 Git 平台的遠端儲存庫 ( Remote Repository )</h3><p>與共用儲存庫 ( Shared Repository ) 幾乎一樣，差別在於遠端儲存庫大多使用 SSH, Git Protocol, HTTP 等協定遠端存取儲存庫。</p>
<ol>
<li>登入 GitHub，找到並選擇 New Repository</li>
<li>設定專案相關資訊，點選 Create Repository</li>
<li>透過 Set up in Desktop 按鈕自動開啟 GitHub for Windows 工具，自動 clone Repository；或是複製 Git Repo 的網址，在 Git Shell 上執行：<br><code>$ git clone [REPO_URL]</code></li>
</ol>
<hr>
<blockquote>
<p>註：$ 這個金錢符號代表命令提示字元 ( Command Prompt，或稱終端機 Terminal ) 的指令，在輸入指令時不需輸入 $ 字號。<br><a href="https://carolhsu.gitbooks.io/django-girls-tutorial-traditional-chiness/content/intro_to_command_line/README.html" target="_blank" rel="external">相關教學</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有三種建立儲存庫的方式：&lt;/p&gt;
&lt;h3 id=&quot;1-本機的本地儲存庫-Local-Repository&quot;&gt;&lt;a href=&quot;#1-本機的本地儲存庫-Local-Repository&quot; class=&quot;headerlink&quot; title=&quot;1. 本機的本地儲存庫 ( Loca
    
    </summary>
    
    
      <category term="Git" scheme="https://tsuyoshitsai.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git #02 安裝工具</title>
    <link href="https://tsuyoshitsai.github.io/2016/12/29/Git-02-%E5%AE%89%E8%A3%9D%E5%B7%A5%E5%85%B7/"/>
    <id>https://tsuyoshitsai.github.io/2016/12/29/Git-02-安裝工具/</id>
    <published>2016-12-28T17:34:30.000Z</published>
    <updated>2016-12-29T16:17:42.807Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Git-for-Windows"><a href="#1-Git-for-Windows" class="headerlink" title="1. Git for Windows*"></a>1. <a href="https://git-for-windows.github.io/" target="_blank" rel="external">Git for Windows*</a></h3><p>底層 Git 工具，Windows 使用者非裝不可。</p>
<ul>
<li>建議不要安裝 Windows Explorer integration</li>
<li>建議在 Adjusting your PATH environment 步驟時，選擇 Run Git from the Windows Command Prompt 這個選項</li>
<li>其他選項使用預設的即可</li>
</ul>
<h3 id="2-GitHub-for-Windows"><a href="#2-GitHub-for-Windows" class="headerlink" title="2. GitHub for Windows"></a>2. <a href="https://desktop.github.com/" target="_blank" rel="external">GitHub for Windows</a></h3><p>GitHub 官方開發的 GUI 工具，可完成基本的版控功能。</p>
<ul>
<li>將 GitHub 上的儲存庫複製回來 ( Clone Repositories )</li>
<li>瀏覽本地儲存庫的版本歷史紀錄 ( Browse History )</li>
<li>提交變更到本地儲存庫 ( Commit Changes )</li>
<li>建立與管理、切換分支 ( Branch Code )</li>
<li>與 GitHub 同步 ( Share on GitHub.com )</li>
</ul>
<h3 id="3-SourceTree"><a href="#3-SourceTree" class="headerlink" title="3. SourceTree"></a>3. <a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">SourceTree</a></h3><p>較完整的 GUI 工具，建議了解 Git 運作機制與觀念後再使用。</p>
<ul>
<li>幾乎所有指令列功能都能透過該工具完成</li>
<li>須在安裝後 30 天內免費註冊並登錄序號</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-Git-for-Windows&quot;&gt;&lt;a href=&quot;#1-Git-for-Windows&quot; class=&quot;headerlink&quot; title=&quot;1. Git for Windows*&quot;&gt;&lt;/a&gt;1. &lt;a href=&quot;https://git-for-windo
    
    </summary>
    
    
      <category term="Git" scheme="https://tsuyoshitsai.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git #01 準備開始</title>
    <link href="https://tsuyoshitsai.github.io/2016/12/29/Git-01-%E6%BA%96%E5%82%99%E9%96%8B%E5%A7%8B/"/>
    <id>https://tsuyoshitsai.github.io/2016/12/29/Git-01-準備開始/</id>
    <published>2016-12-28T17:33:45.000Z</published>
    <updated>2016-12-29T16:20:10.063Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git-的優點"><a href="#Git-的優點" class="headerlink" title="Git 的優點"></a>Git 的優點</h3><ul>
<li>不依賴網路，能夠在本地端進行版控</li>
<li>備份容易，每個人都擁有完整的開發紀錄</li>
<li>分支的操作相當彈性且輕量，每個分支只是某個 Commit 物件的參考指標而已</li>
</ul>
<h3 id="學習方法"><a href="#學習方法" class="headerlink" title="學習方法"></a>學習方法</h3><p>Git 的指令跟參數非常多，若每次要用 Git 指令時都要查書的話，會非常沒效率，故學習 Git 最終仍需 GUI 工具作為輔助，但一開始還是建議先透過下指令的方式學習 Git 的基礎觀念。</p>
<h5 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h5><ol>
<li>了解運作原理</li>
<li>建立思維模式 ( Mindset )</li>
<li>尋找適合的相關工具 ( GUI )</li>
</ol>
<h5 id="重點觀念"><a href="#重點觀念" class="headerlink" title="重點觀念"></a>重點觀念</h5><ul>
<li>學習建立、操作分支 ( Branch )</li>
<li>學習合併檔案 ( Merge )</li>
<li>學習解決衝突 ( Conflict )</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Git-的優點&quot;&gt;&lt;a href=&quot;#Git-的優點&quot; class=&quot;headerlink&quot; title=&quot;Git 的優點&quot;&gt;&lt;/a&gt;Git 的優點&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不依賴網路，能夠在本地端進行版控&lt;/li&gt;
&lt;li&gt;備份容易，每個人都擁有完整的開發紀錄
    
    </summary>
    
    
      <category term="Git" scheme="https://tsuyoshitsai.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git #00 前言</title>
    <link href="https://tsuyoshitsai.github.io/2016/12/29/Git-00-%E5%89%8D%E8%A8%80/"/>
    <id>https://tsuyoshitsai.github.io/2016/12/29/Git-00-前言/</id>
    <published>2016-12-28T17:30:45.000Z</published>
    <updated>2017-01-09T17:41:30.434Z</updated>
    
    <content type="html"><![CDATA[<p>這一系列的文章用來記錄學習 Git 的過程，最主要的資訊來源是保哥的 <a href="https://github.com/doggy8088/Learn-Git-in-30-days" target="_blank" rel="external">《30 天精通 Git 版本控管》</a>。</p>
<p>會寫下一些核心的觀念跟常用的指令，希望未來突然記不起某個概念或某項指令的操作方式時，能透過這些文章讓自己迅速地回想起來。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這一系列的文章用來記錄學習 Git 的過程，最主要的資訊來源是保哥的 &lt;a href=&quot;https://github.com/doggy8088/Learn-Git-in-30-days&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《30 天精通 Git
    
    </summary>
    
    
      <category term="Git" scheme="https://tsuyoshitsai.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
